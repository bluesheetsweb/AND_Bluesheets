plugins {
    id 'com.android.application'
    id 'kotlin-android'
    id 'kotlin-kapt'
    id 'dagger.hilt.android.plugin'
    id "org.jlleitschuh.gradle.ktlint"
}

android {
    compileSdk rootProject.ext.compileSdkVersion
    defaultConfig {
        applicationId "com.bluesheets"
        minSdkVersion 23
        targetSdkVersion 33
        versionCode 1
        versionName "1.0"
    }
    // Method for Auto-Increment Version Code
    increaseVersionCode()

    flavorDimensions "default"

    productFlavors {
        production {
            dimension "default"
        }
        staging {
            dimension "default"
        }
        uat {
            dimension "default"
        }
    }

    packagingOptions {
        exclude 'META-INF/INDEX.LIST'
        exclude "META-INF/io.netty.versions.properties"
    }


    buildTypes {
        debug {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            applicationIdSuffix ".debug"
            buildConfigField("String", "BASE_URL", "\"http://13.232.186.171:8080\"")
            buildConfigField("String", "API_KEY", "\"HBNA19QVVAPP\"")
            buildConfigField("boolean", "ON_DEBUG_MODE", "true")
        }
        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            buildConfigField("String", "BASE_URL", "\"https://reqres.in\"")
            buildConfigField("String", "API_KEY", "\"HBNA19QVVAPP\"")
            buildConfigField("boolean", "ON_DEBUG_MODE", "false")
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_11
        targetCompatibility JavaVersion.VERSION_11
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }
    buildFeatures {
        viewBinding true
        dataBinding true
    }
}

dependencies {
    //Supported Modules
    implementation project(path: ':wrapperUtil')
    implementation project(path: ':networkUtil')

    // Android Support Library
    implementation "androidx.appcompat:appcompat:$rootProject.app_compat_version"
    implementation "androidx.core:core-ktx:$rootProject.ktx"
    implementation "androidx.vectordrawable:vectordrawable:$rootProject.vector"
    implementation "androidx.lifecycle:lifecycle-livedata-ktx:$rootProject.lifecycle_version"
    implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:$rootProject.lifecycle_version"
    implementation "androidx.navigation:navigation-fragment-ktx:$rootProject.navigation"
    implementation "androidx.navigation:navigation-ui-ktx:$rootProject.navigation"

    // Constraint Layout
    implementation "androidx.constraintlayout:constraintlayout:$rootProject.constraint_version"

    // Material Design
    implementation "com.google.android.material:material:$rootProject.support_library_version"

    // RecyclerView
    implementation "androidx.recyclerview:recyclerview:$rootProject.recyclerViewVersion"

    // CardView
    implementation "androidx.cardview:cardview:$rootProject.cardViewVersion"

    // Multidex
    implementation "androidx.multidex:multidex:2.0.1"

    // Database
    implementation "androidx.room:room-runtime:$rootProject.roomDatabaseVersion"
    implementation "androidx.annotation:annotation:$rootProject.annotation"
    implementation "androidx.legacy:legacy-support-v4:$rootProject.legacy_support"
    kapt "androidx.room:room-compiler:$rootProject.roomDatabaseVersion"
    implementation "androidx.room:room-rxjava2:$rootProject.roomDatabaseVersion"

    // Image
    implementation "com.github.bumptech.glide:glide:$rootProject.glide_version"
    kapt "com.github.bumptech.glide:compiler:$rootProject.glide_version"

    // Networking
    implementation "com.squareup.retrofit2:retrofit:$rootProject.retrofit_version"
    implementation "com.squareup.retrofit2:converter-gson:$rootProject.retrofit_version"
    implementation "com.squareup.okhttp3:okhttp:$rootProject.okhttp_version"
    implementation "com.squareup.okhttp3:logging-interceptor:$rootProject.okhttp_version"
    implementation "com.jakewharton.retrofit:retrofit2-rxjava2-adapter:$rootProject.rx_adapter"

    // Reactive
    implementation "io.reactivex.rxjava2:rxjava:$rootProject.rxjava_version"
    implementation "io.reactivex.rxjava2:rxandroid:$rootProject.rxandroid_version"

    // Parser
    implementation "com.google.code.gson:gson:$rootProject.gson_version"

    // Local Unit tests
    testImplementation "junit:junit:$rootProject.junit_version"
    testImplementation "org.mockito:mockito-core:$rootProject.mockito_version"

    // UI Testing
    androidTestImplementation "androidx.test.espresso:espresso-core:$rootProject.espresso_version"
    androidTestImplementation "androidx.test.espresso:espresso-intents:$rootProject.espresso_version"
    androidTestImplementation "org.mockito:mockito-core:$rootProject.mockito_version"

    androidTestImplementation "androidx.test.espresso:espresso-contrib:$rootProject.espresso_version"
    androidTestImplementation "androidx.test.espresso:espresso-accessibility:$rootProject.espresso_version"
    androidTestImplementation "androidx.test.espresso:espresso-web:$rootProject.espresso_version"
    androidTestImplementation "androidx.test.espresso.idling:idling-concurrent:$rootProject.espresso_version"

    androidTestImplementation "androidx.test.espresso:espresso-idling-resource:$rootProject.espresso_version"

    implementation "com.google.dagger:hilt-android:$hilt_version"
    kapt "com.google.dagger:hilt-android-compiler:$hilt_version"
    implementation "androidx.hilt:hilt-lifecycle-viewmodel:$rootProject.lifecycle_viewModel"
    kapt "androidx.hilt:hilt-compiler:$rootProject.lifecycle_viewModel"
    implementation "androidx.viewpager2:viewpager2:1.0.0"

    kapt "com.android.databinding:compiler:3.1.4"

}

kapt {
    correctErrorTypes = true
    generateStubs = true
}

// auto increment feature for version code and name.
def increaseVersionCode() {
    gradle.taskGraph.whenReady { taskGraph ->
        // assembleRelease, this implies that it will work only for release.
        if (taskGraph.hasTask(assembleRelease)) {
            def versionPropsFile = file('version.properties')

            /* when run release task */
            if (versionPropsFile.canRead()) {
                def Properties versionProps = new Properties()
                versionProps.load(new FileInputStream(versionPropsFile))
                def build = versionProps['VERSION_BUILD'].toInteger() + 1
                def code = versionProps['VERSION_CODE'].toInteger() + 1
                versionProps['VERSION_BUILD'] = build.toString()
                versionProps['VERSION_CODE'] = code.toString()
                versionProps.store(versionPropsFile.newWriter(), null)
            } else {
                throw new GradleException("Could not read file")
            }
        }
    }
}
